trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Tu agente autoservido local

variables:
  dockerImage: isaiascruz/album-viewer
  dockerTag: latest
  dockerfilePath: docker/app/Dockerfile
  buildContext: .
  k8sYamlPath: environment/
  sonarProjectKey: dotnet-album-viewer
  sonarProjectName: AlbumViewer
  sonarHostUrl: 'http://localhost:9000'
  sonarToken: '$(SONARQUBE_TOKEN)'  # AsegÃºrate de configurarlo como variable secreta

stages:

# ========================
# 1. SONARQUBE ANALYSIS
# ========================
- stage: SonarQube
  displayName: "SonarQube Analysis"
  jobs:
    - job: Analysis
      displayName: "Run SonarQube analysis"
      steps:
        - checkout: self

        - task: SonarQubePrepare@5
          displayName: "Prepare SonarQube"
          inputs:
            SonarQube: 'SonarQube_Local'  # Nombre del servicio en Azure DevOps para SonarQube (debes configurarlo)
            scannerMode: 'MSBuild'
            projectKey: $(sonarProjectKey)
            projectName: $(sonarProjectName)

        - script: |
            dotnet restore src/AlbumViewerNetCore/AlbumViewerNetCore.csproj
            dotnet build src/AlbumViewerNetCore/AlbumViewerNetCore.csproj --no-restore
          displayName: "Restore & Build"

        - task: SonarQubeAnalyze@5
          displayName: "Run SonarQube Analysis"

        - task: SonarQubePublish@5
          displayName: "Publish SonarQube Results"
          inputs:
            pollingTimeoutSec: '300'

# ========================
# 2. BUILD & PUSH
# ========================
- stage: Docker
  dependsOn: SonarQube
  condition: succeeded()
  displayName: "Docker Build & Push"
  jobs:
    - job: BuildPush
      steps:
        - task: Docker@2
          displayName: "Build Docker Image"
          inputs:
            command: build
            Dockerfile: $(dockerfilePath)
            tags: $(dockerTag)
            repository: $(dockerImage)
            buildContext: $(buildContext)

        - task: Docker@2
          displayName: "Push to DockerHub"
          inputs:
            command: push
            tags: $(dockerTag)
            repository: $(dockerImage)

# ========================
# 3. CUSTOM SCRIPTS
# ========================
- stage: CustomScripts
  dependsOn: Docker
  displayName: "Run CMD Scripts"
  jobs:
    - job: HelloWorld
      displayName: "Hola Mundo 10 veces"
      strategy:
        parallel: 10
      steps:
        - script: echo Hola Mundo desde job %AGENT_JOBNAME%
          displayName: "Hola Mundo"

    - job: CreateFiles
      displayName: "Crear y mostrar archivos"
      steps:
        - script: |
            mkdir output
            for /L %%i in (1,1,10) do (
              echo %DATE% %TIME% > output\fecha_%%i.txt
            )
            type output\*.txt
          displayName: "Generar y mostrar archivos con fecha"

# ========================
# 4. K8S DEPLOY
# ========================
- stage: DeployK8s
  dependsOn: CustomScripts
  displayName: "Deploy to Minikube"
  jobs:
    - job: ApplyK8s
      steps:
        - script: |
            kubectl apply -f $(k8sYamlPath)
            kubectl get pods -o wide
          displayName: "Apply K8s manifests"
