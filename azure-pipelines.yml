# ========================
# 4. K8S DEPLOY (VERSIÓN SIMPLIFICADA)
# ========================
- stage: DeployK8s
  dependsOn: Docker
  displayName: "Deploy to Minikube"
  jobs:
    - job: ApplyK8s
      steps:
        # PASO 1: Desplegar solo la base de datos
        - powershell: |
            Write-Host "🗄️ Step 1: Deploying Database..."
            kubectl apply -f "$(k8sYamlPath)mysql-deployment.yaml"
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to deploy database"
                exit 1
            }
          displayName: "Deploy Database Only"
       
        # PASO 2: Esperar a que la BD esté lista
        - powershell: |
            Write-Host "⏳ Step 2: Waiting for Database to be ready..."
            kubectl wait --for=condition=ready pod -l app=album-db --timeout=300s
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Database pod failed to become ready"
                kubectl get pods -l app=album-db
                kubectl describe pods -l app=album-db
                exit 1
            }
            Write-Host "✅ Database pod is ready"
          displayName: "Wait for DB readiness"
       
        # PASO 3: Cargar datos
        - powershell: |
            Write-Host "📊 Step 3: Loading database data..."
            $POD_NAME = kubectl get pods -l app=album-db -o jsonpath="{.items[0].metadata.name}"
            Write-Host "Database pod: $POD_NAME"
            
            # Verificar conexión
            Write-Host "Testing MySQL connection..."
            kubectl exec $POD_NAME -- mysql -u root -proot -e "SHOW DATABASES;"
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Cannot connect to MySQL"
                exit 1
            }
            
            # Cargar datos solo si existe el archivo
            if (Test-Path "AlbumViewerSqlServerData.sql") {
                Write-Host "Loading SQL data..."
                Get-Content "AlbumViewerSqlServerData.sql" | kubectl exec -i $POD_NAME -- mysql -u root -proot AlbumViewer
                
                # Verificar que se cargaron los datos
                $tableCount = kubectl exec $POD_NAME -- mysql -u root -proot AlbumViewer -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'AlbumViewer';" -s -N 2>$null
                Write-Host "Tables loaded: $tableCount"
                
                if ($tableCount -gt 0) {
                    Write-Host "✅ Data loaded successfully"
                } else {
                    Write-Warning "⚠️ No tables found after loading"
                }
            } else {
                Write-Warning "SQL file not found, skipping data load"
            }
          displayName: "Load SQL Data"
       
        # PASO 4: Desplegar aplicación
        - powershell: |
            Write-Host "🚀 Step 4: Deploying Application..."
            kubectl apply -f "$(k8sYamlPath)app-deployment.yaml"
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to deploy application"
                exit 1
            }
            Write-Host "✅ Application deployed"
          displayName: "Deploy Application"
       
        # PASO 5: Desplegar ingress
        - powershell: |
            Write-Host "🌐 Step 5: Deploying Ingress..."
            kubectl apply -f "$(k8sYamlPath)ingress.yaml"
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to deploy ingress"
                exit 1
            }
            Write-Host "✅ Ingress deployed"
          displayName: "Deploy Ingress"
       
        # PASO 6: Verificar que todo esté listo
        - powershell: |
            Write-Host "🔍 Step 6: Final verification..."
            
            # Esperar a que la aplicación esté lista
            Write-Host "Waiting for application pod..."
            kubectl wait --for=condition=ready pod -l app=album-viewer --timeout=180s
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Application is ready!"
            } else {
                Write-Warning "⚠️ Application might not be fully ready yet"
                # Mostrar estado para debugging
                kubectl get pods -l app=album-viewer
                $APP_POD = kubectl get pods -l app=album-viewer -o jsonpath="{.items[0].metadata.name}" 2>$null
                if (![string]::IsNullOrEmpty($APP_POD)) {
                    Write-Host "Last 10 lines of application logs:"
                    kubectl logs $APP_POD --tail=10
                }
            }
            
            Write-Host "`n🎉 Deployment Summary:"
            Write-Host "===================="
            kubectl get pods,services,ingress
            Write-Host "`n✅ Pipeline completed!"
          displayName: "Final Verification"