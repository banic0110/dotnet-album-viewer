trigger:
  branches:
    include:
      - main
pool:
  name: Default  # Tu agente autoservido local
variables:
  dockerImage: ic0110/infosyp-prueba
  dockerTag: latest
  dockerfilePath: docker/app/Dockerfile
  buildContext: .
  k8sYamlPath: environment/
  sonarProjectKey: dotnet-album-viewer
  sonarProjectName: AlbumViewer
  sonarHostUrl: 'http://localhost:9000'
  sonarToken: '$(SONARQUBE_TOKEN)'  # Asegúrate de configurarlo como variable secreta

stages:
# ========================
# 1. SONARQUBE ANALYSIS
# ========================
- stage: SonarQube
  displayName: "SonarQube Analysis"
  jobs:
    - job: Analysis
      displayName: "Run SonarQube analysis"
      steps:
        - checkout: self
        - task: SonarQubePrepare@5
          displayName: "Prepare SonarQube"
          inputs:
            SonarQube: 'Local Agent SonarQube'  # Nombre del servicio en Azure DevOps para SonarQube (debes configurarlo)
            scannerMode: 'MSBuild'
            projectKey: $(sonarProjectKey)
            projectName: $(sonarProjectName)
        - script: |
            dotnet restore src/AlbumViewerNetCore/AlbumViewerNetCore.csproj
            dotnet build src/AlbumViewerNetCore/AlbumViewerNetCore.csproj --no-restore
          displayName: "Restore & Build"
        - task: SonarQubeAnalyze@5
          displayName: "Run SonarQube Analysis"
        - task: SonarQubePublish@5
          displayName: "Publish SonarQube Results"
          inputs:
            pollingTimeoutSec: '300'

# ========================
# 2. BUILD & PUSH
# ========================
- stage: Docker
  dependsOn: SonarQube
  condition: succeeded()
  displayName: "Docker Build & Push"
  jobs:
    - job: BuildPush
      steps:
        - task: Docker@2
          displayName: "Build Docker Image"
          inputs:
            command: build
            Dockerfile: $(dockerfilePath)
            tags: $(dockerTag)
            repository: $(dockerImage)
            buildContext: $(buildContext)
        - task: Docker@2
          displayName: "Push to DockerHub"
          inputs:
            command: push
            tags: $(dockerTag)
            repository: $(dockerImage)

# ========================
# 4. K8S DEPLOY
# ========================
- stage: DeployK8s
  dependsOn: Docker
  displayName: "Deploy to Minikube"
  jobs:
    - job: ApplyK8s
      steps:
        - script: |
            kubectl apply -f $(k8sYamlPath)
            kubectl get pods -o wide
          displayName: "Apply K8s manifests"
       
        - script: |
            echo "Waiting for DB pod to be ready..."
            kubectl wait --for=condition=ready pod -l app=album-db --timeout=120s
          displayName: "Wait for DB readiness"
        
        # Opción 1: Comando corregido (recomendado)
        # - script: |
        #     $POD_NAME = kubectl get pods -l app=album-db -o jsonpath="{.items[0].metadata.name}"
        #     echo "Pod name: $POD_NAME"
        #     kubectl exec -i $POD_NAME -- mysql -u root -proot AlbumViewer < AlbumViewerSqlServerData.sql
        #   displayName: "Load SQL inside pod - Option 1"
        
        # Opción 2: Alternativa con verificación de conexión
        - powershell: |
            $POD_NAME = kubectl get pods -l app=album-db -o jsonpath="{.items[0].metadata.name}"
            Write-Host "Pod name: $POD_NAME"
            Write-Host "Testing MySQL connection..."
            kubectl exec $POD_NAME -- mysql -u root -proot -e "SHOW DATABASES;"
            Write-Host "Loading SQL data..."
            Get-Content AlbumViewerSqlServerData.sql | kubectl exec -i $POD_NAME -- mysql -u root -proot AlbumViewer
          displayName: "Load SQL inside pod - PowerShell"